#!/usr/bin/env python3
import argparse
import os
import sys

import cadquery as cq

from cq_nut import cq_nut
from helicalthreads import HelicalThreads
from utils import dbg, setCtx, show

setCtx(globals())

if __name__ == "__main__" or "cq_editor" in sys.modules:
    # Clearance between internal threads and external threads.
    # The external threads are horzitionally moved to create
    # the clearance.
    ext_clearance: float = 0.05

    # Set to guarantee the thread and core overlap and a manifold is created
    thread_overlap: float = 0.001

    # Tolerance value for generating STL files
    stl_tolerance: float = 1e-3

    # The separation between edges of a helix after on revolution.
    pitch: float = 2

    # The included angle of the "tip" of a thread
    angle_degs: float = 90

    # Adjust z by inset so threads are inset from the bottom and top
    inset: float = pitch / 3

    dia_major: float = 8
    height: float = 10 + (2 * inset)
    head_size: float = 12  # Size of the head

    major_cutoff: float = pitch / 8
    minor_cutoff: float = pitch / 4
    taper_out_rpos: float = 0.1
    taper_in_rpos: float = 1 - taper_out_rpos

    parser = argparse.ArgumentParser()
    # Ignored for nuts
    parser.add_argument(
        "-c",
        "--ext_clearance",
        help="Clearance between internal and external threads",
        nargs="?",
        type=float,
        default=ext_clearance,
    )
    parser.add_argument(
        "-to",
        "--thread_overlap",
        help="Thread overlap with core",
        nargs="?",
        type=float,
        default=thread_overlap,
    )
    parser.add_argument(
        "-st",
        "--stl_tolerance",
        help="stl file tollerance",
        nargs="?",
        type=float,
        default=stl_tolerance,
    )
    parser.add_argument(
        "-p", "--pitch", help="thread pitch", nargs="?", type=float, default=pitch,
    )
    parser.add_argument(
        "-a",
        "--angle_degs",
        help="Angle of thread in degrees",
        nargs="?",
        type=float,
        default=angle_degs,
    )
    parser.add_argument(
        "-in",
        "--inset",
        help="Top and bottom inset of threads",
        nargs="?",
        type=float,
        default=inset,
    )
    parser.add_argument(
        "-d", "--diameter", help="Diameter", nargs="?", type=float, default=dia_major,
    )
    parser.add_argument(
        "-he",
        "--height",
        help="Height of threads including inset",
        nargs="?",
        type=float,
        default=height,
    )
    parser.add_argument(
        "-hs",
        "--head_size",
        help="Size of head",
        nargs="?",
        type=float,
        default=head_size,
    )
    parser.add_argument(
        "-mj",
        "--major_cutoff",
        help="Thread cutoff at outside diameter (major_diameter)",
        nargs="?",
        type=float,
        default=major_cutoff,
    )
    parser.add_argument(
        "-mi",
        "--minor_cutoff",
        help="Thread cutoff at inside diameter (minor_diameter)",
        nargs="?",
        type=float,
        default=minor_cutoff,
    )
    parser.add_argument(
        "-tir",
        "--taper_in_rpos",
        help="Taper in relative position, so 0.1 is 10%% of the initial thread will be tapered",
        nargs="?",
        type=float,
        default=taper_in_rpos,
    )
    parser.add_argument(
        "-tor",
        "--taper_out_rpos",
        help="Taper out relative position, so 0.9 means so 10% of the ending portion of thread will be tapered",
        nargs="?",
        type=float,
        default=taper_out_rpos,
    )

    if "cq_editor" in sys.modules:
        # TODO: How to pass parameters to an app executed by cq-ediort
        # For now we'll pass nothing
        args = parser.parse_args([])
    else:
        # Not cq_editor so parse_args will parse the command line parameters
        args = parser.parse_args()

    print(f"arg={vars(args)}")

    height = args.height
    pitch = args.pitch
    dia_major = args.diameter
    angle_degs = args.angle_degs
    inset = args.inset
    ext_clearance = args.ext_clearance
    taper_in_rpos = args.taper_in_rpos
    taper_out_rpos = args.taper_out_rpos
    major_cutoff = args.major_cutoff
    minor_cutoff = args.minor_cutoff
    thread_overlap = args.thread_overlap
    stl_tolerance = args.stl_tolerance

    ht = HelicalThreads(
        height=height,
        pitch=pitch,
        dia_major=dia_major,
        angle_degs=angle_degs,
        inset=inset,
        ext_clearance=ext_clearance,
        taper_out_rpos=taper_out_rpos,
        taper_in_rpos=taper_in_rpos,
        major_cutoff=major_cutoff,
        minor_cutoff=minor_cutoff,
        thread_overlap=thread_overlap,
    )
    print(f"ht={vars(ht)}")

    nut: cq.Workplane = cq_nut(ht, head_size)
    show(nut, "nut-0")

    directory: str = "generated"
    fname = f"nut-dia_{dia_major:.3f}-p_{pitch:.3f}-a_{angle_degs:.3f}-h_{height:.3f}-hs_{head_size}-mj_{major_cutoff}-mi_{minor_cutoff:.3f}-ec_{ext_clearance:.3f}-to_{thread_overlap:.4f}-tol_{stl_tolerance:.3f}.stl"
    cq.exporters.export(nut, os.path.join(directory, fname), tolerance=stl_tolerance)
    print(f"{fname}")
